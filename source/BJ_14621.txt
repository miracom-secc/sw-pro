import java.io.BufferedReader; 
import java.io.BufferedWriter; 
import java.io.IOException; 
import java.io.InputStreamReader; 
import java.io.OutputStreamWriter; 
import java.util.ArrayList; 
import java.util.Collections; 
import java.util.StringTokenizer; 


class Edge implements Comparable<Edge> {
    int v1; 	// 정점1
    int v2;		// 정점2
    int cost; 	// 가중치
    Edge(int v1, int v2, int cost) {
        this.v1 = v1;
        this.v2 = v2;
        this.cost = cost;
    }
    @Override
    public int compareTo(Edge o) {
        if(this.cost < o.cost)
            return -1;
        else if(this.cost == o.cost)
            return 0;
        else
            return 1;
    }
}


public class Main { 
	static int[] parent;
	static char[] univ;
	static ArrayList<Edge> edgeList; 


	public static void main(String[] args) throws NumberFormatException, IOException { 
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); 
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out)); 
		StringTokenizer st = new StringTokenizer(br.readLine()); 


		int N = Integer.parseInt(st.nextToken()); 	//학교 수
		int M = Integer.parseInt(st.nextToken()); 	//도로의 갯수

		univ = new char[N+1];	//남초, 여초 대학 구분을 위한 배열
		
		st = new StringTokenizer(br.readLine());
		for(int i = 1; i <=N ; i++) {
			univ[i] = st.nextToken().charAt(0);
		}
		
 		edgeList = new ArrayList<>(); 

 		for (int i = 0; i < M; i++) { 
			st = new StringTokenizer(br.readLine()); 


			int u = Integer.parseInt(st.nextToken()); 	// 출발학교
			int v = Integer.parseInt(st.nextToken()); 	// 도착학교
			int d = Integer.parseInt(st.nextToken()); 	// 거리


			edgeList.add(new Edge(u, v, d)); 
		}
 		
		Collections.sort(edgeList); // 가중치 기준으로 오름차순 정렬 

		parent = new int[N+1];
		
		//부모 배열 초기화
		for (int i = 1; i <= N ; i++) { 
			parent[i] = i; 
		} 
		
		int edgeCnt = 0;	// 연결된 도로의 갯수 !=  정점 - 1 ==> 모든 대학교를 연결하는 경로가 존재하지 않는다.
		int ans = 0; 
		// 가중치가 0이 오르막길이라고 했으므로 오름차순 정렬한대로 MST를 구현하면 최악의 경로가 된다. 
		for (int i = 0; i < edgeList.size(); i++) { 
			Edge edge = edgeList.get(i);

			if (find(edge.v1) != find(edge.v2)) { 
				if(univ[edge.v1] != univ[edge.v2] ) {
					edgeCnt ++;
					ans += edge.cost;
					union(edge.v1, edge.v2); 
				}
			} 
		} 

		bw.write((edgeCnt != N - 1 ? -1 : ans) + "\n");
		bw.flush(); 
		bw.close(); 
		br.close(); 
	} 

	public static int find(int x) { 
		if (x == parent[x]) { 
			return x; 
		} 

		return parent[x] = find(parent[x]); 
	} 


	public static void union(int x, int y) { 
		x = find(x); 
		y = find(y); 

		if (x != y) { 
			parent[y] = x; 
		} 
	} 
	
} 
